// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueAeonOuterClass {
  /**
   * Protobuf type {@code RogueAeon}
   */
  public static final class RogueAeon extends ProtoMessage<RogueAeon> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 aeon_enhance_unlock_num = 4;</code>
     */
    private int aeonEnhanceUnlockNum;

    /**
     * <code>optional uint32 aeon_id = 6;</code>
     */
    private int aeonId;

    /**
     * <code>optional bool is_unlock_enhance_buff = 14;</code>
     */
    private boolean isUnlockEnhanceBuff;

    private RogueAeon() {
    }

    /**
     * @return a new empty instance of {@code RogueAeon}
     */
    public static RogueAeon newInstance() {
      return new RogueAeon();
    }

    /**
     * <code>optional uint32 aeon_enhance_unlock_num = 4;</code>
     * @return whether the aeonEnhanceUnlockNum field is set
     */
    public boolean hasAeonEnhanceUnlockNum() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 aeon_enhance_unlock_num = 4;</code>
     * @return this
     */
    public RogueAeon clearAeonEnhanceUnlockNum() {
      bitField0_ &= ~0x00000001;
      aeonEnhanceUnlockNum = 0;
      return this;
    }

    /**
     * <code>optional uint32 aeon_enhance_unlock_num = 4;</code>
     * @return the aeonEnhanceUnlockNum
     */
    public int getAeonEnhanceUnlockNum() {
      return aeonEnhanceUnlockNum;
    }

    /**
     * <code>optional uint32 aeon_enhance_unlock_num = 4;</code>
     * @param value the aeonEnhanceUnlockNum to set
     * @return this
     */
    public RogueAeon setAeonEnhanceUnlockNum(final int value) {
      bitField0_ |= 0x00000001;
      aeonEnhanceUnlockNum = value;
      return this;
    }

    /**
     * <code>optional uint32 aeon_id = 6;</code>
     * @return whether the aeonId field is set
     */
    public boolean hasAeonId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 aeon_id = 6;</code>
     * @return this
     */
    public RogueAeon clearAeonId() {
      bitField0_ &= ~0x00000002;
      aeonId = 0;
      return this;
    }

    /**
     * <code>optional uint32 aeon_id = 6;</code>
     * @return the aeonId
     */
    public int getAeonId() {
      return aeonId;
    }

    /**
     * <code>optional uint32 aeon_id = 6;</code>
     * @param value the aeonId to set
     * @return this
     */
    public RogueAeon setAeonId(final int value) {
      bitField0_ |= 0x00000002;
      aeonId = value;
      return this;
    }

    /**
     * <code>optional bool is_unlock_enhance_buff = 14;</code>
     * @return whether the isUnlockEnhanceBuff field is set
     */
    public boolean hasIsUnlockEnhanceBuff() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional bool is_unlock_enhance_buff = 14;</code>
     * @return this
     */
    public RogueAeon clearIsUnlockEnhanceBuff() {
      bitField0_ &= ~0x00000004;
      isUnlockEnhanceBuff = false;
      return this;
    }

    /**
     * <code>optional bool is_unlock_enhance_buff = 14;</code>
     * @return the isUnlockEnhanceBuff
     */
    public boolean getIsUnlockEnhanceBuff() {
      return isUnlockEnhanceBuff;
    }

    /**
     * <code>optional bool is_unlock_enhance_buff = 14;</code>
     * @param value the isUnlockEnhanceBuff to set
     * @return this
     */
    public RogueAeon setIsUnlockEnhanceBuff(final boolean value) {
      bitField0_ |= 0x00000004;
      isUnlockEnhanceBuff = value;
      return this;
    }

    @Override
    public RogueAeon copyFrom(final RogueAeon other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        aeonEnhanceUnlockNum = other.aeonEnhanceUnlockNum;
        aeonId = other.aeonId;
        isUnlockEnhanceBuff = other.isUnlockEnhanceBuff;
      }
      return this;
    }

    @Override
    public RogueAeon mergeFrom(final RogueAeon other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasAeonEnhanceUnlockNum()) {
        setAeonEnhanceUnlockNum(other.aeonEnhanceUnlockNum);
      }
      if (other.hasAeonId()) {
        setAeonId(other.aeonId);
      }
      if (other.hasIsUnlockEnhanceBuff()) {
        setIsUnlockEnhanceBuff(other.isUnlockEnhanceBuff);
      }
      return this;
    }

    @Override
    public RogueAeon clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      aeonEnhanceUnlockNum = 0;
      aeonId = 0;
      isUnlockEnhanceBuff = false;
      return this;
    }

    @Override
    public RogueAeon clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueAeon)) {
        return false;
      }
      RogueAeon other = (RogueAeon) o;
      return bitField0_ == other.bitField0_
        && (!hasAeonEnhanceUnlockNum() || aeonEnhanceUnlockNum == other.aeonEnhanceUnlockNum)
        && (!hasAeonId() || aeonId == other.aeonId)
        && (!hasIsUnlockEnhanceBuff() || isUnlockEnhanceBuff == other.isUnlockEnhanceBuff);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(aeonEnhanceUnlockNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 48);
        output.writeUInt32NoTag(aeonId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 112);
        output.writeBoolNoTag(isUnlockEnhanceBuff);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aeonEnhanceUnlockNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aeonId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 2;
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueAeon mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 32: {
            // aeonEnhanceUnlockNum
            aeonEnhanceUnlockNum = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // aeonId
            aeonId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // isUnlockEnhanceBuff
            isUnlockEnhanceBuff = input.readBool();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.aeonEnhanceUnlockNum, aeonEnhanceUnlockNum);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.aeonId, aeonId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeBool(FieldNames.isUnlockEnhanceBuff, isUnlockEnhanceBuff);
      }
      output.endObject();
    }

    @Override
    public RogueAeon mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -1937056329:
          case -967984392: {
            if (input.isAtField(FieldNames.aeonEnhanceUnlockNum)) {
              if (!input.trySkipNullValue()) {
                aeonEnhanceUnlockNum = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1421249154:
          case -1109029417: {
            if (input.isAtField(FieldNames.aeonId)) {
              if (!input.trySkipNullValue()) {
                aeonId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1006386637:
          case -118645302: {
            if (input.isAtField(FieldNames.isUnlockEnhanceBuff)) {
              if (!input.trySkipNullValue()) {
                isUnlockEnhanceBuff = input.readBool();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueAeon clone() {
      return new RogueAeon().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueAeon parseFrom(final byte[] data) throws InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueAeon(), data).checkInitialized();
    }

    public static RogueAeon parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueAeon(), input).checkInitialized();
    }

    public static RogueAeon parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueAeon(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueAeon messages
     */
    public static MessageFactory<RogueAeon> getFactory() {
      return RogueAeonFactory.INSTANCE;
    }

    private enum RogueAeonFactory implements MessageFactory<RogueAeon> {
      INSTANCE;

      @Override
      public RogueAeon create() {
        return RogueAeon.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName aeonEnhanceUnlockNum = FieldName.forField("aeonEnhanceUnlockNum", "aeon_enhance_unlock_num");

      static final FieldName aeonId = FieldName.forField("aeonId", "aeon_id");

      static final FieldName isUnlockEnhanceBuff = FieldName.forField("isUnlockEnhanceBuff", "is_unlock_enhance_buff");
    }
  }
}
