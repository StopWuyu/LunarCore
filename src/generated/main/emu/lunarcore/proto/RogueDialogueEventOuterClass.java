// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;
import us.hebi.quickbuf.RepeatedInt;
import us.hebi.quickbuf.RepeatedMessage;

public final class RogueDialogueEventOuterClass {
  /**
   * Protobuf type {@code RogueDialogueEvent}
   */
  public static final class RogueDialogueEvent extends ProtoMessage<RogueDialogueEvent> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 npc_id = 3;</code>
     */
    private int npcId;

    /**
     * <code>optional uint32 game_mode_type = 8;</code>
     */
    private int gameModeType;

    /**
     * <code>optional uint32 unique_id = 11;</code>
     */
    private int uniqueId;

    /**
     * <code>repeated uint32 select_event_id = 6;</code>
     */
    private final RepeatedInt selectEventId = RepeatedInt.newEmptyInstance();

    /**
     * <code>repeated .RogueDialogueEventParam rogue_dialogue_event_param = 14;</code>
     */
    private final RepeatedMessage<RogueDialogueEventParamOuterClass.RogueDialogueEventParam> rogueDialogueEventParam = RepeatedMessage.newEmptyInstance(RogueDialogueEventParamOuterClass.RogueDialogueEventParam.getFactory());

    private RogueDialogueEvent() {
    }

    /**
     * @return a new empty instance of {@code RogueDialogueEvent}
     */
    public static RogueDialogueEvent newInstance() {
      return new RogueDialogueEvent();
    }

    /**
     * <code>optional uint32 npc_id = 3;</code>
     * @return whether the npcId field is set
     */
    public boolean hasNpcId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 npc_id = 3;</code>
     * @return this
     */
    public RogueDialogueEvent clearNpcId() {
      bitField0_ &= ~0x00000001;
      npcId = 0;
      return this;
    }

    /**
     * <code>optional uint32 npc_id = 3;</code>
     * @return the npcId
     */
    public int getNpcId() {
      return npcId;
    }

    /**
     * <code>optional uint32 npc_id = 3;</code>
     * @param value the npcId to set
     * @return this
     */
    public RogueDialogueEvent setNpcId(final int value) {
      bitField0_ |= 0x00000001;
      npcId = value;
      return this;
    }

    /**
     * <code>optional uint32 game_mode_type = 8;</code>
     * @return whether the gameModeType field is set
     */
    public boolean hasGameModeType() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 game_mode_type = 8;</code>
     * @return this
     */
    public RogueDialogueEvent clearGameModeType() {
      bitField0_ &= ~0x00000002;
      gameModeType = 0;
      return this;
    }

    /**
     * <code>optional uint32 game_mode_type = 8;</code>
     * @return the gameModeType
     */
    public int getGameModeType() {
      return gameModeType;
    }

    /**
     * <code>optional uint32 game_mode_type = 8;</code>
     * @param value the gameModeType to set
     * @return this
     */
    public RogueDialogueEvent setGameModeType(final int value) {
      bitField0_ |= 0x00000002;
      gameModeType = value;
      return this;
    }

    /**
     * <code>optional uint32 unique_id = 11;</code>
     * @return whether the uniqueId field is set
     */
    public boolean hasUniqueId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 unique_id = 11;</code>
     * @return this
     */
    public RogueDialogueEvent clearUniqueId() {
      bitField0_ &= ~0x00000004;
      uniqueId = 0;
      return this;
    }

    /**
     * <code>optional uint32 unique_id = 11;</code>
     * @return the uniqueId
     */
    public int getUniqueId() {
      return uniqueId;
    }

    /**
     * <code>optional uint32 unique_id = 11;</code>
     * @param value the uniqueId to set
     * @return this
     */
    public RogueDialogueEvent setUniqueId(final int value) {
      bitField0_ |= 0x00000004;
      uniqueId = value;
      return this;
    }

    /**
     * <code>repeated uint32 select_event_id = 6;</code>
     * @return whether the selectEventId field is set
     */
    public boolean hasSelectEventId() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>repeated uint32 select_event_id = 6;</code>
     * @return this
     */
    public RogueDialogueEvent clearSelectEventId() {
      bitField0_ &= ~0x00000008;
      selectEventId.clear();
      return this;
    }

    /**
     * <code>repeated uint32 select_event_id = 6;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableSelectEventId()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedInt getSelectEventId() {
      return selectEventId;
    }

    /**
     * <code>repeated uint32 select_event_id = 6;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedInt getMutableSelectEventId() {
      bitField0_ |= 0x00000008;
      return selectEventId;
    }

    /**
     * <code>repeated uint32 select_event_id = 6;</code>
     * @param value the selectEventId to add
     * @return this
     */
    public RogueDialogueEvent addSelectEventId(final int value) {
      bitField0_ |= 0x00000008;
      selectEventId.add(value);
      return this;
    }

    /**
     * <code>repeated uint32 select_event_id = 6;</code>
     * @param values the selectEventId to add
     * @return this
     */
    public RogueDialogueEvent addAllSelectEventId(final int... values) {
      bitField0_ |= 0x00000008;
      selectEventId.addAll(values);
      return this;
    }

    /**
     * <code>repeated .RogueDialogueEventParam rogue_dialogue_event_param = 14;</code>
     * @return whether the rogueDialogueEventParam field is set
     */
    public boolean hasRogueDialogueEventParam() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>repeated .RogueDialogueEventParam rogue_dialogue_event_param = 14;</code>
     * @return this
     */
    public RogueDialogueEvent clearRogueDialogueEventParam() {
      bitField0_ &= ~0x00000010;
      rogueDialogueEventParam.clear();
      return this;
    }

    /**
     * <code>repeated .RogueDialogueEventParam rogue_dialogue_event_param = 14;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRogueDialogueEventParam()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RepeatedMessage<RogueDialogueEventParamOuterClass.RogueDialogueEventParam> getRogueDialogueEventParam(
        ) {
      return rogueDialogueEventParam;
    }

    /**
     * <code>repeated .RogueDialogueEventParam rogue_dialogue_event_param = 14;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RepeatedMessage<RogueDialogueEventParamOuterClass.RogueDialogueEventParam> getMutableRogueDialogueEventParam(
        ) {
      bitField0_ |= 0x00000010;
      return rogueDialogueEventParam;
    }

    /**
     * <code>repeated .RogueDialogueEventParam rogue_dialogue_event_param = 14;</code>
     * @param value the rogueDialogueEventParam to add
     * @return this
     */
    public RogueDialogueEvent addRogueDialogueEventParam(
        final RogueDialogueEventParamOuterClass.RogueDialogueEventParam value) {
      bitField0_ |= 0x00000010;
      rogueDialogueEventParam.add(value);
      return this;
    }

    /**
     * <code>repeated .RogueDialogueEventParam rogue_dialogue_event_param = 14;</code>
     * @param values the rogueDialogueEventParam to add
     * @return this
     */
    public RogueDialogueEvent addAllRogueDialogueEventParam(
        final RogueDialogueEventParamOuterClass.RogueDialogueEventParam... values) {
      bitField0_ |= 0x00000010;
      rogueDialogueEventParam.addAll(values);
      return this;
    }

    @Override
    public RogueDialogueEvent copyFrom(final RogueDialogueEvent other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        npcId = other.npcId;
        gameModeType = other.gameModeType;
        uniqueId = other.uniqueId;
        selectEventId.copyFrom(other.selectEventId);
        rogueDialogueEventParam.copyFrom(other.rogueDialogueEventParam);
      }
      return this;
    }

    @Override
    public RogueDialogueEvent mergeFrom(final RogueDialogueEvent other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasNpcId()) {
        setNpcId(other.npcId);
      }
      if (other.hasGameModeType()) {
        setGameModeType(other.gameModeType);
      }
      if (other.hasUniqueId()) {
        setUniqueId(other.uniqueId);
      }
      if (other.hasSelectEventId()) {
        getMutableSelectEventId().addAll(other.selectEventId);
      }
      if (other.hasRogueDialogueEventParam()) {
        getMutableRogueDialogueEventParam().addAll(other.rogueDialogueEventParam);
      }
      return this;
    }

    @Override
    public RogueDialogueEvent clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      npcId = 0;
      gameModeType = 0;
      uniqueId = 0;
      selectEventId.clear();
      rogueDialogueEventParam.clear();
      return this;
    }

    @Override
    public RogueDialogueEvent clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      selectEventId.clear();
      rogueDialogueEventParam.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueDialogueEvent)) {
        return false;
      }
      RogueDialogueEvent other = (RogueDialogueEvent) o;
      return bitField0_ == other.bitField0_
        && (!hasNpcId() || npcId == other.npcId)
        && (!hasGameModeType() || gameModeType == other.gameModeType)
        && (!hasUniqueId() || uniqueId == other.uniqueId)
        && (!hasSelectEventId() || selectEventId.equals(other.selectEventId))
        && (!hasRogueDialogueEventParam() || rogueDialogueEventParam.equals(other.rogueDialogueEventParam));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 24);
        output.writeUInt32NoTag(npcId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 64);
        output.writeUInt32NoTag(gameModeType);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(uniqueId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        for (int i = 0; i < selectEventId.length(); i++) {
          output.writeRawByte((byte) 48);
          output.writeUInt32NoTag(selectEventId.array()[i]);
        }
      }
      if ((bitField0_ & 0x00000010) != 0) {
        for (int i = 0; i < rogueDialogueEventParam.length(); i++) {
          output.writeRawByte((byte) 114);
          output.writeMessageNoTag(rogueDialogueEventParam.get(i));
        }
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(npcId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(gameModeType);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(uniqueId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += (1 * selectEventId.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(selectEventId);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += (1 * rogueDialogueEventParam.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(rogueDialogueEventParam);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueDialogueEvent mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 24: {
            // npcId
            npcId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 64) {
              break;
            }
          }
          case 64: {
            // gameModeType
            gameModeType = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // uniqueId
            uniqueId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 50) {
              break;
            }
          }
          case 50: {
            // selectEventId [packed=true]
            input.readPackedUInt32(selectEventId, tag);
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 114) {
              break;
            }
          }
          case 114: {
            // rogueDialogueEventParam
            tag = input.readRepeatedMessage(rogueDialogueEventParam, tag);
            bitField0_ |= 0x00000010;
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
          case 48: {
            // selectEventId [packed=false]
            tag = input.readRepeatedUInt32(selectEventId, tag);
            bitField0_ |= 0x00000008;
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.npcId, npcId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.gameModeType, gameModeType);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.uniqueId, uniqueId);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRepeatedUInt32(FieldNames.selectEventId, selectEventId);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRepeatedMessage(FieldNames.rogueDialogueEventParam, rogueDialogueEventParam);
      }
      output.endObject();
    }

    @Override
    public RogueDialogueEvent mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 105021404:
          case -1039282375: {
            if (input.isAtField(FieldNames.npcId)) {
              if (!input.trySkipNullValue()) {
                npcId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -464498289:
          case 1937775689: {
            if (input.isAtField(FieldNames.gameModeType)) {
              if (!input.trySkipNullValue()) {
                gameModeType = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -294460212:
          case -538310583: {
            if (input.isAtField(FieldNames.uniqueId)) {
              if (!input.trySkipNullValue()) {
                uniqueId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -653046599:
          case 2115999939: {
            if (input.isAtField(FieldNames.selectEventId)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedUInt32(selectEventId);
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -151140987:
          case -927797242: {
            if (input.isAtField(FieldNames.rogueDialogueEventParam)) {
              if (!input.trySkipNullValue()) {
                input.readRepeatedMessage(rogueDialogueEventParam);
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueDialogueEvent clone() {
      return new RogueDialogueEvent().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueDialogueEvent parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueDialogueEvent(), data).checkInitialized();
    }

    public static RogueDialogueEvent parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueDialogueEvent(), input).checkInitialized();
    }

    public static RogueDialogueEvent parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueDialogueEvent(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueDialogueEvent messages
     */
    public static MessageFactory<RogueDialogueEvent> getFactory() {
      return RogueDialogueEventFactory.INSTANCE;
    }

    private enum RogueDialogueEventFactory implements MessageFactory<RogueDialogueEvent> {
      INSTANCE;

      @Override
      public RogueDialogueEvent create() {
        return RogueDialogueEvent.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName npcId = FieldName.forField("npcId", "npc_id");

      static final FieldName gameModeType = FieldName.forField("gameModeType", "game_mode_type");

      static final FieldName uniqueId = FieldName.forField("uniqueId", "unique_id");

      static final FieldName selectEventId = FieldName.forField("selectEventId", "select_event_id");

      static final FieldName rogueDialogueEventParam = FieldName.forField("rogueDialogueEventParam", "rogue_dialogue_event_param");
    }
  }
}
