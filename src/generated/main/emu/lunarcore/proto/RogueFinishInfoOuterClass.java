// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class RogueFinishInfoOuterClass {
  /**
   * Protobuf type {@code RogueFinishInfo}
   */
  public static final class RogueFinishInfo extends ProtoMessage<RogueFinishInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 taken_score = 1;</code>
     */
    private int takenScore;

    /**
     * <code>optional uint32 ANBFGOKNEIA = 4;</code>
     */
    private int aNBFGOKNEIA;

    /**
     * <code>optional uint32 pass_room_count = 9;</code>
     */
    private int passRoomCount;

    /**
     * <code>optional uint32 total_score = 14;</code>
     */
    private int totalScore;

    /**
     * <code>optional uint32 area_id = 1122;</code>
     */
    private int areaId;

    /**
     * <pre>
     * MMOCIHBBOMA LDFFDAMFFFO = 11;
     * ItemList IPNGMMIOJJB = 14;
     * HNNAOBNKFLO LAOLNLHIECJ = 7;
     * </pre>
     *
     * <code>optional uint32 reach_room_count = 1999;</code>
     */
    private int reachRoomCount;

    /**
     * <code>optional bool BFCBHPCPAOI = 2;</code>
     */
    private boolean bFCBHPCPAOI;

    /**
     * <code>optional bool is_win = 6;</code>
     */
    private boolean isWin;

    /**
     * <pre>
     * uint32 BCKPHBOPCCN = 8;
     * </pre>
     *
     * <code>optional .ItemList ICOCLPBLFNN = 3;</code>
     */
    private final ItemListOuterClass.ItemList iCOCLPBLFNN = ItemListOuterClass.ItemList.newInstance();

    /**
     * <code>optional .RogueRecordInfo record_info = 7;</code>
     */
    private final RogueRecordInfoOuterClass.RogueRecordInfo recordInfo = RogueRecordInfoOuterClass.RogueRecordInfo.newInstance();

    /**
     * <code>optional .RogueScoreRewardInfo cur_score_reward_info = 8;</code>
     */
    private final RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo curScoreRewardInfo = RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo.newInstance();

    /**
     * <code>optional .RogueScoreRewardInfo score_reward_info = 12;</code>
     */
    private final RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo scoreRewardInfo = RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo.newInstance();

    /**
     * <code>optional .ItemList LBLELCPPLCI = 13;</code>
     */
    private final ItemListOuterClass.ItemList lBLELCPPLCI = ItemListOuterClass.ItemList.newInstance();

    private RogueFinishInfo() {
    }

    /**
     * @return a new empty instance of {@code RogueFinishInfo}
     */
    public static RogueFinishInfo newInstance() {
      return new RogueFinishInfo();
    }

    /**
     * <code>optional uint32 taken_score = 1;</code>
     * @return whether the takenScore field is set
     */
    public boolean hasTakenScore() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 taken_score = 1;</code>
     * @return this
     */
    public RogueFinishInfo clearTakenScore() {
      bitField0_ &= ~0x00000001;
      takenScore = 0;
      return this;
    }

    /**
     * <code>optional uint32 taken_score = 1;</code>
     * @return the takenScore
     */
    public int getTakenScore() {
      return takenScore;
    }

    /**
     * <code>optional uint32 taken_score = 1;</code>
     * @param value the takenScore to set
     * @return this
     */
    public RogueFinishInfo setTakenScore(final int value) {
      bitField0_ |= 0x00000001;
      takenScore = value;
      return this;
    }

    /**
     * <code>optional uint32 ANBFGOKNEIA = 4;</code>
     * @return whether the aNBFGOKNEIA field is set
     */
    public boolean hasANBFGOKNEIA() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 ANBFGOKNEIA = 4;</code>
     * @return this
     */
    public RogueFinishInfo clearANBFGOKNEIA() {
      bitField0_ &= ~0x00000002;
      aNBFGOKNEIA = 0;
      return this;
    }

    /**
     * <code>optional uint32 ANBFGOKNEIA = 4;</code>
     * @return the aNBFGOKNEIA
     */
    public int getANBFGOKNEIA() {
      return aNBFGOKNEIA;
    }

    /**
     * <code>optional uint32 ANBFGOKNEIA = 4;</code>
     * @param value the aNBFGOKNEIA to set
     * @return this
     */
    public RogueFinishInfo setANBFGOKNEIA(final int value) {
      bitField0_ |= 0x00000002;
      aNBFGOKNEIA = value;
      return this;
    }

    /**
     * <code>optional uint32 pass_room_count = 9;</code>
     * @return whether the passRoomCount field is set
     */
    public boolean hasPassRoomCount() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 pass_room_count = 9;</code>
     * @return this
     */
    public RogueFinishInfo clearPassRoomCount() {
      bitField0_ &= ~0x00000004;
      passRoomCount = 0;
      return this;
    }

    /**
     * <code>optional uint32 pass_room_count = 9;</code>
     * @return the passRoomCount
     */
    public int getPassRoomCount() {
      return passRoomCount;
    }

    /**
     * <code>optional uint32 pass_room_count = 9;</code>
     * @param value the passRoomCount to set
     * @return this
     */
    public RogueFinishInfo setPassRoomCount(final int value) {
      bitField0_ |= 0x00000004;
      passRoomCount = value;
      return this;
    }

    /**
     * <code>optional uint32 total_score = 14;</code>
     * @return whether the totalScore field is set
     */
    public boolean hasTotalScore() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional uint32 total_score = 14;</code>
     * @return this
     */
    public RogueFinishInfo clearTotalScore() {
      bitField0_ &= ~0x00000008;
      totalScore = 0;
      return this;
    }

    /**
     * <code>optional uint32 total_score = 14;</code>
     * @return the totalScore
     */
    public int getTotalScore() {
      return totalScore;
    }

    /**
     * <code>optional uint32 total_score = 14;</code>
     * @param value the totalScore to set
     * @return this
     */
    public RogueFinishInfo setTotalScore(final int value) {
      bitField0_ |= 0x00000008;
      totalScore = value;
      return this;
    }

    /**
     * <code>optional uint32 area_id = 1122;</code>
     * @return whether the areaId field is set
     */
    public boolean hasAreaId() {
      return (bitField0_ & 0x00000010) != 0;
    }

    /**
     * <code>optional uint32 area_id = 1122;</code>
     * @return this
     */
    public RogueFinishInfo clearAreaId() {
      bitField0_ &= ~0x00000010;
      areaId = 0;
      return this;
    }

    /**
     * <code>optional uint32 area_id = 1122;</code>
     * @return the areaId
     */
    public int getAreaId() {
      return areaId;
    }

    /**
     * <code>optional uint32 area_id = 1122;</code>
     * @param value the areaId to set
     * @return this
     */
    public RogueFinishInfo setAreaId(final int value) {
      bitField0_ |= 0x00000010;
      areaId = value;
      return this;
    }

    /**
     * <pre>
     * MMOCIHBBOMA LDFFDAMFFFO = 11;
     * ItemList IPNGMMIOJJB = 14;
     * HNNAOBNKFLO LAOLNLHIECJ = 7;
     * </pre>
     *
     * <code>optional uint32 reach_room_count = 1999;</code>
     * @return whether the reachRoomCount field is set
     */
    public boolean hasReachRoomCount() {
      return (bitField0_ & 0x00000020) != 0;
    }

    /**
     * <pre>
     * MMOCIHBBOMA LDFFDAMFFFO = 11;
     * ItemList IPNGMMIOJJB = 14;
     * HNNAOBNKFLO LAOLNLHIECJ = 7;
     * </pre>
     *
     * <code>optional uint32 reach_room_count = 1999;</code>
     * @return this
     */
    public RogueFinishInfo clearReachRoomCount() {
      bitField0_ &= ~0x00000020;
      reachRoomCount = 0;
      return this;
    }

    /**
     * <pre>
     * MMOCIHBBOMA LDFFDAMFFFO = 11;
     * ItemList IPNGMMIOJJB = 14;
     * HNNAOBNKFLO LAOLNLHIECJ = 7;
     * </pre>
     *
     * <code>optional uint32 reach_room_count = 1999;</code>
     * @return the reachRoomCount
     */
    public int getReachRoomCount() {
      return reachRoomCount;
    }

    /**
     * <pre>
     * MMOCIHBBOMA LDFFDAMFFFO = 11;
     * ItemList IPNGMMIOJJB = 14;
     * HNNAOBNKFLO LAOLNLHIECJ = 7;
     * </pre>
     *
     * <code>optional uint32 reach_room_count = 1999;</code>
     * @param value the reachRoomCount to set
     * @return this
     */
    public RogueFinishInfo setReachRoomCount(final int value) {
      bitField0_ |= 0x00000020;
      reachRoomCount = value;
      return this;
    }

    /**
     * <code>optional bool BFCBHPCPAOI = 2;</code>
     * @return whether the bFCBHPCPAOI field is set
     */
    public boolean hasBFCBHPCPAOI() {
      return (bitField0_ & 0x00000040) != 0;
    }

    /**
     * <code>optional bool BFCBHPCPAOI = 2;</code>
     * @return this
     */
    public RogueFinishInfo clearBFCBHPCPAOI() {
      bitField0_ &= ~0x00000040;
      bFCBHPCPAOI = false;
      return this;
    }

    /**
     * <code>optional bool BFCBHPCPAOI = 2;</code>
     * @return the bFCBHPCPAOI
     */
    public boolean getBFCBHPCPAOI() {
      return bFCBHPCPAOI;
    }

    /**
     * <code>optional bool BFCBHPCPAOI = 2;</code>
     * @param value the bFCBHPCPAOI to set
     * @return this
     */
    public RogueFinishInfo setBFCBHPCPAOI(final boolean value) {
      bitField0_ |= 0x00000040;
      bFCBHPCPAOI = value;
      return this;
    }

    /**
     * <code>optional bool is_win = 6;</code>
     * @return whether the isWin field is set
     */
    public boolean hasIsWin() {
      return (bitField0_ & 0x00000080) != 0;
    }

    /**
     * <code>optional bool is_win = 6;</code>
     * @return this
     */
    public RogueFinishInfo clearIsWin() {
      bitField0_ &= ~0x00000080;
      isWin = false;
      return this;
    }

    /**
     * <code>optional bool is_win = 6;</code>
     * @return the isWin
     */
    public boolean getIsWin() {
      return isWin;
    }

    /**
     * <code>optional bool is_win = 6;</code>
     * @param value the isWin to set
     * @return this
     */
    public RogueFinishInfo setIsWin(final boolean value) {
      bitField0_ |= 0x00000080;
      isWin = value;
      return this;
    }

    /**
     * <pre>
     * uint32 BCKPHBOPCCN = 8;
     * </pre>
     *
     * <code>optional .ItemList ICOCLPBLFNN = 3;</code>
     * @return whether the iCOCLPBLFNN field is set
     */
    public boolean hasICOCLPBLFNN() {
      return (bitField0_ & 0x00000100) != 0;
    }

    /**
     * <pre>
     * uint32 BCKPHBOPCCN = 8;
     * </pre>
     *
     * <code>optional .ItemList ICOCLPBLFNN = 3;</code>
     * @return this
     */
    public RogueFinishInfo clearICOCLPBLFNN() {
      bitField0_ &= ~0x00000100;
      iCOCLPBLFNN.clear();
      return this;
    }

    /**
     * <pre>
     * uint32 BCKPHBOPCCN = 8;
     * </pre>
     *
     * <code>optional .ItemList ICOCLPBLFNN = 3;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableICOCLPBLFNN()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ItemListOuterClass.ItemList getICOCLPBLFNN() {
      return iCOCLPBLFNN;
    }

    /**
     * <pre>
     * uint32 BCKPHBOPCCN = 8;
     * </pre>
     *
     * <code>optional .ItemList ICOCLPBLFNN = 3;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ItemListOuterClass.ItemList getMutableICOCLPBLFNN() {
      bitField0_ |= 0x00000100;
      return iCOCLPBLFNN;
    }

    /**
     * <pre>
     * uint32 BCKPHBOPCCN = 8;
     * </pre>
     *
     * <code>optional .ItemList ICOCLPBLFNN = 3;</code>
     * @param value the iCOCLPBLFNN to set
     * @return this
     */
    public RogueFinishInfo setICOCLPBLFNN(final ItemListOuterClass.ItemList value) {
      bitField0_ |= 0x00000100;
      iCOCLPBLFNN.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RogueRecordInfo record_info = 7;</code>
     * @return whether the recordInfo field is set
     */
    public boolean hasRecordInfo() {
      return (bitField0_ & 0x00000200) != 0;
    }

    /**
     * <code>optional .RogueRecordInfo record_info = 7;</code>
     * @return this
     */
    public RogueFinishInfo clearRecordInfo() {
      bitField0_ &= ~0x00000200;
      recordInfo.clear();
      return this;
    }

    /**
     * <code>optional .RogueRecordInfo record_info = 7;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableRecordInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueRecordInfoOuterClass.RogueRecordInfo getRecordInfo() {
      return recordInfo;
    }

    /**
     * <code>optional .RogueRecordInfo record_info = 7;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueRecordInfoOuterClass.RogueRecordInfo getMutableRecordInfo() {
      bitField0_ |= 0x00000200;
      return recordInfo;
    }

    /**
     * <code>optional .RogueRecordInfo record_info = 7;</code>
     * @param value the recordInfo to set
     * @return this
     */
    public RogueFinishInfo setRecordInfo(final RogueRecordInfoOuterClass.RogueRecordInfo value) {
      bitField0_ |= 0x00000200;
      recordInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RogueScoreRewardInfo cur_score_reward_info = 8;</code>
     * @return whether the curScoreRewardInfo field is set
     */
    public boolean hasCurScoreRewardInfo() {
      return (bitField0_ & 0x00000400) != 0;
    }

    /**
     * <code>optional .RogueScoreRewardInfo cur_score_reward_info = 8;</code>
     * @return this
     */
    public RogueFinishInfo clearCurScoreRewardInfo() {
      bitField0_ &= ~0x00000400;
      curScoreRewardInfo.clear();
      return this;
    }

    /**
     * <code>optional .RogueScoreRewardInfo cur_score_reward_info = 8;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableCurScoreRewardInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo getCurScoreRewardInfo() {
      return curScoreRewardInfo;
    }

    /**
     * <code>optional .RogueScoreRewardInfo cur_score_reward_info = 8;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo getMutableCurScoreRewardInfo() {
      bitField0_ |= 0x00000400;
      return curScoreRewardInfo;
    }

    /**
     * <code>optional .RogueScoreRewardInfo cur_score_reward_info = 8;</code>
     * @param value the curScoreRewardInfo to set
     * @return this
     */
    public RogueFinishInfo setCurScoreRewardInfo(
        final RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo value) {
      bitField0_ |= 0x00000400;
      curScoreRewardInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .RogueScoreRewardInfo score_reward_info = 12;</code>
     * @return whether the scoreRewardInfo field is set
     */
    public boolean hasScoreRewardInfo() {
      return (bitField0_ & 0x00000800) != 0;
    }

    /**
     * <code>optional .RogueScoreRewardInfo score_reward_info = 12;</code>
     * @return this
     */
    public RogueFinishInfo clearScoreRewardInfo() {
      bitField0_ &= ~0x00000800;
      scoreRewardInfo.clear();
      return this;
    }

    /**
     * <code>optional .RogueScoreRewardInfo score_reward_info = 12;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableScoreRewardInfo()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo getScoreRewardInfo() {
      return scoreRewardInfo;
    }

    /**
     * <code>optional .RogueScoreRewardInfo score_reward_info = 12;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo getMutableScoreRewardInfo() {
      bitField0_ |= 0x00000800;
      return scoreRewardInfo;
    }

    /**
     * <code>optional .RogueScoreRewardInfo score_reward_info = 12;</code>
     * @param value the scoreRewardInfo to set
     * @return this
     */
    public RogueFinishInfo setScoreRewardInfo(
        final RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo value) {
      bitField0_ |= 0x00000800;
      scoreRewardInfo.copyFrom(value);
      return this;
    }

    /**
     * <code>optional .ItemList LBLELCPPLCI = 13;</code>
     * @return whether the lBLELCPPLCI field is set
     */
    public boolean hasLBLELCPPLCI() {
      return (bitField0_ & 0x00001000) != 0;
    }

    /**
     * <code>optional .ItemList LBLELCPPLCI = 13;</code>
     * @return this
     */
    public RogueFinishInfo clearLBLELCPPLCI() {
      bitField0_ &= ~0x00001000;
      lBLELCPPLCI.clear();
      return this;
    }

    /**
     * <code>optional .ItemList LBLELCPPLCI = 13;</code>
     *
     * This method returns the internal storage object without modifying any has state.
     * The returned object should not be modified and be treated as read-only.
     *
     * Use {@link #getMutableLBLELCPPLCI()} if you want to modify it.
     *
     * @return internal storage object for reading
     */
    public ItemListOuterClass.ItemList getLBLELCPPLCI() {
      return lBLELCPPLCI;
    }

    /**
     * <code>optional .ItemList LBLELCPPLCI = 13;</code>
     *
     * This method returns the internal storage object and sets the corresponding
     * has state. The returned object will become part of this message and its
     * contents may be modified as long as the has state is not cleared.
     *
     * @return internal storage object for modifications
     */
    public ItemListOuterClass.ItemList getMutableLBLELCPPLCI() {
      bitField0_ |= 0x00001000;
      return lBLELCPPLCI;
    }

    /**
     * <code>optional .ItemList LBLELCPPLCI = 13;</code>
     * @param value the lBLELCPPLCI to set
     * @return this
     */
    public RogueFinishInfo setLBLELCPPLCI(final ItemListOuterClass.ItemList value) {
      bitField0_ |= 0x00001000;
      lBLELCPPLCI.copyFrom(value);
      return this;
    }

    @Override
    public RogueFinishInfo copyFrom(final RogueFinishInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        takenScore = other.takenScore;
        aNBFGOKNEIA = other.aNBFGOKNEIA;
        passRoomCount = other.passRoomCount;
        totalScore = other.totalScore;
        areaId = other.areaId;
        reachRoomCount = other.reachRoomCount;
        bFCBHPCPAOI = other.bFCBHPCPAOI;
        isWin = other.isWin;
        iCOCLPBLFNN.copyFrom(other.iCOCLPBLFNN);
        recordInfo.copyFrom(other.recordInfo);
        curScoreRewardInfo.copyFrom(other.curScoreRewardInfo);
        scoreRewardInfo.copyFrom(other.scoreRewardInfo);
        lBLELCPPLCI.copyFrom(other.lBLELCPPLCI);
      }
      return this;
    }

    @Override
    public RogueFinishInfo mergeFrom(final RogueFinishInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasTakenScore()) {
        setTakenScore(other.takenScore);
      }
      if (other.hasANBFGOKNEIA()) {
        setANBFGOKNEIA(other.aNBFGOKNEIA);
      }
      if (other.hasPassRoomCount()) {
        setPassRoomCount(other.passRoomCount);
      }
      if (other.hasTotalScore()) {
        setTotalScore(other.totalScore);
      }
      if (other.hasAreaId()) {
        setAreaId(other.areaId);
      }
      if (other.hasReachRoomCount()) {
        setReachRoomCount(other.reachRoomCount);
      }
      if (other.hasBFCBHPCPAOI()) {
        setBFCBHPCPAOI(other.bFCBHPCPAOI);
      }
      if (other.hasIsWin()) {
        setIsWin(other.isWin);
      }
      if (other.hasICOCLPBLFNN()) {
        getMutableICOCLPBLFNN().mergeFrom(other.iCOCLPBLFNN);
      }
      if (other.hasRecordInfo()) {
        getMutableRecordInfo().mergeFrom(other.recordInfo);
      }
      if (other.hasCurScoreRewardInfo()) {
        getMutableCurScoreRewardInfo().mergeFrom(other.curScoreRewardInfo);
      }
      if (other.hasScoreRewardInfo()) {
        getMutableScoreRewardInfo().mergeFrom(other.scoreRewardInfo);
      }
      if (other.hasLBLELCPPLCI()) {
        getMutableLBLELCPPLCI().mergeFrom(other.lBLELCPPLCI);
      }
      return this;
    }

    @Override
    public RogueFinishInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      takenScore = 0;
      aNBFGOKNEIA = 0;
      passRoomCount = 0;
      totalScore = 0;
      areaId = 0;
      reachRoomCount = 0;
      bFCBHPCPAOI = false;
      isWin = false;
      iCOCLPBLFNN.clear();
      recordInfo.clear();
      curScoreRewardInfo.clear();
      scoreRewardInfo.clear();
      lBLELCPPLCI.clear();
      return this;
    }

    @Override
    public RogueFinishInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      iCOCLPBLFNN.clearQuick();
      recordInfo.clearQuick();
      curScoreRewardInfo.clearQuick();
      scoreRewardInfo.clearQuick();
      lBLELCPPLCI.clearQuick();
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof RogueFinishInfo)) {
        return false;
      }
      RogueFinishInfo other = (RogueFinishInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasTakenScore() || takenScore == other.takenScore)
        && (!hasANBFGOKNEIA() || aNBFGOKNEIA == other.aNBFGOKNEIA)
        && (!hasPassRoomCount() || passRoomCount == other.passRoomCount)
        && (!hasTotalScore() || totalScore == other.totalScore)
        && (!hasAreaId() || areaId == other.areaId)
        && (!hasReachRoomCount() || reachRoomCount == other.reachRoomCount)
        && (!hasBFCBHPCPAOI() || bFCBHPCPAOI == other.bFCBHPCPAOI)
        && (!hasIsWin() || isWin == other.isWin)
        && (!hasICOCLPBLFNN() || iCOCLPBLFNN.equals(other.iCOCLPBLFNN))
        && (!hasRecordInfo() || recordInfo.equals(other.recordInfo))
        && (!hasCurScoreRewardInfo() || curScoreRewardInfo.equals(other.curScoreRewardInfo))
        && (!hasScoreRewardInfo() || scoreRewardInfo.equals(other.scoreRewardInfo))
        && (!hasLBLELCPPLCI() || lBLELCPPLCI.equals(other.lBLELCPPLCI));
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 8);
        output.writeUInt32NoTag(takenScore);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 32);
        output.writeUInt32NoTag(aNBFGOKNEIA);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 72);
        output.writeUInt32NoTag(passRoomCount);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(totalScore);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeRawLittleEndian16((short) 18064);
        output.writeUInt32NoTag(areaId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeRawLittleEndian16((short) 31992);
        output.writeUInt32NoTag(reachRoomCount);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeRawByte((byte) 16);
        output.writeBoolNoTag(bFCBHPCPAOI);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeRawByte((byte) 48);
        output.writeBoolNoTag(isWin);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeRawByte((byte) 26);
        output.writeMessageNoTag(iCOCLPBLFNN);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeRawByte((byte) 58);
        output.writeMessageNoTag(recordInfo);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeRawByte((byte) 66);
        output.writeMessageNoTag(curScoreRewardInfo);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeRawByte((byte) 98);
        output.writeMessageNoTag(scoreRewardInfo);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeRawByte((byte) 106);
        output.writeMessageNoTag(lBLELCPPLCI);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(takenScore);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(aNBFGOKNEIA);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(passRoomCount);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(totalScore);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(areaId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        size += 2 + ProtoSink.computeUInt32SizeNoTag(reachRoomCount);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000080) != 0) {
        size += 2;
      }
      if ((bitField0_ & 0x00000100) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(iCOCLPBLFNN);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(recordInfo);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(curScoreRewardInfo);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(scoreRewardInfo);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        size += 1 + ProtoSink.computeMessageSizeNoTag(lBLELCPPLCI);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public RogueFinishInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 8: {
            // takenScore
            takenScore = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 32) {
              break;
            }
          }
          case 32: {
            // aNBFGOKNEIA
            aNBFGOKNEIA = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 72) {
              break;
            }
          }
          case 72: {
            // passRoomCount
            passRoomCount = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // totalScore
            totalScore = input.readUInt32();
            bitField0_ |= 0x00000008;
            tag = input.readTag();
            if (tag != 8976) {
              break;
            }
          }
          case 8976: {
            // areaId
            areaId = input.readUInt32();
            bitField0_ |= 0x00000010;
            tag = input.readTag();
            if (tag != 15992) {
              break;
            }
          }
          case 15992: {
            // reachRoomCount
            reachRoomCount = input.readUInt32();
            bitField0_ |= 0x00000020;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // bFCBHPCPAOI
            bFCBHPCPAOI = input.readBool();
            bitField0_ |= 0x00000040;
            tag = input.readTag();
            if (tag != 48) {
              break;
            }
          }
          case 48: {
            // isWin
            isWin = input.readBool();
            bitField0_ |= 0x00000080;
            tag = input.readTag();
            if (tag != 26) {
              break;
            }
          }
          case 26: {
            // iCOCLPBLFNN
            input.readMessage(iCOCLPBLFNN);
            bitField0_ |= 0x00000100;
            tag = input.readTag();
            if (tag != 58) {
              break;
            }
          }
          case 58: {
            // recordInfo
            input.readMessage(recordInfo);
            bitField0_ |= 0x00000200;
            tag = input.readTag();
            if (tag != 66) {
              break;
            }
          }
          case 66: {
            // curScoreRewardInfo
            input.readMessage(curScoreRewardInfo);
            bitField0_ |= 0x00000400;
            tag = input.readTag();
            if (tag != 98) {
              break;
            }
          }
          case 98: {
            // scoreRewardInfo
            input.readMessage(scoreRewardInfo);
            bitField0_ |= 0x00000800;
            tag = input.readTag();
            if (tag != 106) {
              break;
            }
          }
          case 106: {
            // lBLELCPPLCI
            input.readMessage(lBLELCPPLCI);
            bitField0_ |= 0x00001000;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.takenScore, takenScore);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.aNBFGOKNEIA, aNBFGOKNEIA);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.passRoomCount, passRoomCount);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeUInt32(FieldNames.totalScore, totalScore);
      }
      if ((bitField0_ & 0x00000010) != 0) {
        output.writeUInt32(FieldNames.areaId, areaId);
      }
      if ((bitField0_ & 0x00000020) != 0) {
        output.writeUInt32(FieldNames.reachRoomCount, reachRoomCount);
      }
      if ((bitField0_ & 0x00000040) != 0) {
        output.writeBool(FieldNames.bFCBHPCPAOI, bFCBHPCPAOI);
      }
      if ((bitField0_ & 0x00000080) != 0) {
        output.writeBool(FieldNames.isWin, isWin);
      }
      if ((bitField0_ & 0x00000100) != 0) {
        output.writeMessage(FieldNames.iCOCLPBLFNN, iCOCLPBLFNN);
      }
      if ((bitField0_ & 0x00000200) != 0) {
        output.writeMessage(FieldNames.recordInfo, recordInfo);
      }
      if ((bitField0_ & 0x00000400) != 0) {
        output.writeMessage(FieldNames.curScoreRewardInfo, curScoreRewardInfo);
      }
      if ((bitField0_ & 0x00000800) != 0) {
        output.writeMessage(FieldNames.scoreRewardInfo, scoreRewardInfo);
      }
      if ((bitField0_ & 0x00001000) != 0) {
        output.writeMessage(FieldNames.lBLELCPPLCI, lBLELCPPLCI);
      }
      output.endObject();
    }

    @Override
    public RogueFinishInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case -375532021:
          case 1601375514: {
            if (input.isAtField(FieldNames.takenScore)) {
              if (!input.trySkipNullValue()) {
                takenScore = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 345467297: {
            if (input.isAtField(FieldNames.aNBFGOKNEIA)) {
              if (!input.trySkipNullValue()) {
                aNBFGOKNEIA = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 430108643:
          case 173887897: {
            if (input.isAtField(FieldNames.passRoomCount)) {
              if (!input.trySkipNullValue()) {
                passRoomCount = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -716972626:
          case -393348649: {
            if (input.isAtField(FieldNames.totalScore)) {
              if (!input.trySkipNullValue()) {
                totalScore = input.readUInt32();
                bitField0_ |= 0x00000008;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1409553784:
          case -746472947: {
            if (input.isAtField(FieldNames.areaId)) {
              if (!input.trySkipNullValue()) {
                areaId = input.readUInt32();
                bitField0_ |= 0x00000010;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1588434751:
          case 1678904055: {
            if (input.isAtField(FieldNames.reachRoomCount)) {
              if (!input.trySkipNullValue()) {
                reachRoomCount = input.readUInt32();
                bitField0_ |= 0x00000020;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 840663363: {
            if (input.isAtField(FieldNames.bFCBHPCPAOI)) {
              if (!input.trySkipNullValue()) {
                bFCBHPCPAOI = input.readBool();
                bitField0_ |= 0x00000040;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 100482642:
          case -1179753657: {
            if (input.isAtField(FieldNames.isWin)) {
              if (!input.trySkipNullValue()) {
                isWin = input.readBool();
                bitField0_ |= 0x00000080;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1776318262: {
            if (input.isAtField(FieldNames.iCOCLPBLFNN)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(iCOCLPBLFNN);
                bitField0_ |= 0x00000100;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 734573727:
          case 1317125084: {
            if (input.isAtField(FieldNames.recordInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(recordInfo);
                bitField0_ |= 0x00000200;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1101722191:
          case 1894162770: {
            if (input.isAtField(FieldNames.curScoreRewardInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(curScoreRewardInfo);
                bitField0_ |= 0x00000400;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 672564399:
          case 751191441: {
            if (input.isAtField(FieldNames.scoreRewardInfo)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(scoreRewardInfo);
                bitField0_ |= 0x00000800;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1578200140: {
            if (input.isAtField(FieldNames.lBLELCPPLCI)) {
              if (!input.trySkipNullValue()) {
                input.readMessage(lBLELCPPLCI);
                bitField0_ |= 0x00001000;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public RogueFinishInfo clone() {
      return new RogueFinishInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static RogueFinishInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new RogueFinishInfo(), data).checkInitialized();
    }

    public static RogueFinishInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueFinishInfo(), input).checkInitialized();
    }

    public static RogueFinishInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new RogueFinishInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating RogueFinishInfo messages
     */
    public static MessageFactory<RogueFinishInfo> getFactory() {
      return RogueFinishInfoFactory.INSTANCE;
    }

    private enum RogueFinishInfoFactory implements MessageFactory<RogueFinishInfo> {
      INSTANCE;

      @Override
      public RogueFinishInfo create() {
        return RogueFinishInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName takenScore = FieldName.forField("takenScore", "taken_score");

      static final FieldName aNBFGOKNEIA = FieldName.forField("ANBFGOKNEIA");

      static final FieldName passRoomCount = FieldName.forField("passRoomCount", "pass_room_count");

      static final FieldName totalScore = FieldName.forField("totalScore", "total_score");

      static final FieldName areaId = FieldName.forField("areaId", "area_id");

      static final FieldName reachRoomCount = FieldName.forField("reachRoomCount", "reach_room_count");

      static final FieldName bFCBHPCPAOI = FieldName.forField("BFCBHPCPAOI");

      static final FieldName isWin = FieldName.forField("isWin", "is_win");

      static final FieldName iCOCLPBLFNN = FieldName.forField("ICOCLPBLFNN");

      static final FieldName recordInfo = FieldName.forField("recordInfo", "record_info");

      static final FieldName curScoreRewardInfo = FieldName.forField("curScoreRewardInfo", "cur_score_reward_info");

      static final FieldName scoreRewardInfo = FieldName.forField("scoreRewardInfo", "score_reward_info");

      static final FieldName lBLELCPPLCI = FieldName.forField("LBLELCPPLCI");
    }
  }
}
